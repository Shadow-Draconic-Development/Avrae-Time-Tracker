embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def calc_time(time: int) -> str:
    """
    Converts seconds into weeks, days, hours, minutes, seconds.
    
    Args:
        time (int): Time in seconds

    Return:
        str: Time string
    """

    # Unit 
    units = [
        (604800, 'week', 'weeks'),
        (86400, 'day', 'days'),
        (3600, 'hour', 'hours'),
        (60, 'minute', 'minutes'),
        (1, 'second', 'seconds')
    ]

    result_list = []

    # For each time unit
    for unit_time, singular_label, plural_label in units:

        # Floor division
        unit_count = int(time // unit_time)

        # Modular division
        time %= unit_time

        # If unit count is not 0, add to result_list with proper label
        if unit_count > 0:
            label = singular_label if unit_count == 1 else plural_label
            result_list.append(f"{unit_count} {label}")

        # If unit count is 0
        else:
            pass

    return ", ".join(result_list) if result_list != [] else "0 seconds"


def construct_output(uvar_dict: dict, server_id: str, user_input: str|int, add_message: str = None) -> tuple(str, str, str, str):
    """
    Function that constructs output

    Args:
        uvar_dict (dict): User dictionary
        server_id (str): Server ID
        user_input (str|int): Tracker name/page number
    
    Return:
        str: Title
        str: Body content
        str: Thumbnail URL
        str: Color hex code
    """
    
    # Gets copy of name list and length
    tracker_name_list = uvar_dict[server_id].keys()[:] 
    tracker_length = len(tracker_name_list)

    # If input was a tracker name
    if typeof(user_input) == "str":

        # Look up page_number
        page_num = tracker_name_list.index(user_input) + 1

        # If not default DM list
        if user_input != "dm_time":
            tracker_name = user_input

        # If default DM list
        else:
            tracker_name = "DM Time"

    # If input was a page number
    else:
        match user_input:

            # If number above page number
            case c if user_input > tracker_length:
                page_num = tracker_length

            # If number below 1
            case c if user_input < 1:
                page_num = 1

            # If number within bounds
            case _:
                page_num = user_input

        # # Set user and tracker input
        user_input = tracker_name_list[page_num - 1]
        tracker_name = user_input

    # Construct output
    result_list = [
        f"**Page {page_num}/{tracker_length}**",
        "",
        f"**Time:** {calc_time(uvar_dict[server_id][user_input][4])}",
        f"**Clock-Ins:** {uvar_dict[server_id][user_input][5]}"
    ]

    # If error occured
    if add_message:
        result_list.insert(0, add_message + "\n")
        color = "#CF142B"
        image = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/error.png"

    # If error did not occur
    else:
        color = ""
        image = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/main.png"

    return f"All-Time Statistics For {tracker_name}", "\n".join(result_list), image, color


def main(input_list: list[str]) -> str:
    """
    Main program function.
    
    Args:
        input_list(list[str]): List of inputs
    
    Output:
        str: Result
    """

    server_id = str(ctx.guild.id)

    # If there is at least one input
    if len(input_list) > 0:
        pass

    # If there is no input
    else:
        input_list.append("dm_time")

    # If UVAR exists, load dictionary
    if (uvar_test := get_uvar("clock_dict")):
        uvar_dict = load_json(uvar_test)

    # If UVAR does not exist
    else:
        uvar_dict = {
            server_id: {
                "dm_time": [False, int(time()), 0, 0, 0, 0]
            }
        }

        return construct_output(uvar_dict, server_id, "dm_time", "`clock_dict` UVAR did not exist\nUVAR created")
    
    # If server exists
    if server_id in uvar_dict.keys():

        # If number was given
        try:
            return construct_output(uvar_dict, server_id, int(input_list[0]))

        # If name was given
        except:

            # If there is at least one match
            if (result_list := search_list(input_list[0], uvar_dict[server_id])):

                # If there is exactly one match
                if len(result_list) == 1:
                    return construct_output(uvar_dict, server_id, result_list[0])

                # If there is more than one match
                else:

                    # For each match
                    for result in result_list:

                        # If it does not exactly match input
                        if result.lower() != input_list[0].lower():
                            pass

                        # If it exactly matches input
                        else:
                            return construct_output(uvar_dict, server_id, result)

                    result_list.insert(0, "**Multiple Trackers Found:**")

                    return construct_output(uvar_dict, server_id, "dm_time", "\n".join(result_list))

            # If no matches were found
            else:
                return construct_output(uvar_dict, server_id, "dm_time", f"`{input_list[0]}` tracker not found")
    
    # If server does not exist
    else:
        uvar_dict[server_id] = {
            "dm_time": [False, int(time()), 0, 0, 0, 0]
        }

        return construct_output(uvar_dict, server_id, "dm_time", "Server entry not found\nServer entry created")


# Main program function
title, f, thumb, color = main(&ARGS&)
l = "<"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "((thumb))"
-color "{{color}}"
-footer "{{ctx.prefix}}clock alltime {{l}}#/tracker name> | 12/18/23 | ShadowsStride"