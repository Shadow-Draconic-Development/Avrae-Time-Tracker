embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def calc_time(time:int) -> str:
    """
    Converts seconds into weeks, days, hours, minutes, seconds.
    
    Args:
        time(int): Time in seconds

    Return:
        (str): Result
    """

    result_list = []

    # Weeks
    if (weeks := int(time // 604800)) > 0:
        if weeks != 1:
            result_list.append(f"{weeks} weeks")
        
        else:
            result_list.append(f"{weeks} week")
    
    else:
        pass

    # Intermediary calc 1
    t1 = time % 604800

    # Days
    if (days := int(t1 // 86400)) > 0:
        if days != 1:
            result_list.append(f"{days} days")
        
        else:
            result_list.append(f"{days} day")
    
    else:
        pass

    # Intermediary calc 2
    t2 = t1 % 86400

    # Hours
    if (hours := int(t2 // 3600)) > 0:
        if hours != 1:
            result_list.append(f"{hours} hours")
        
        else:
            result_list.append(f"{hours} hour")
    
    else:
        pass

    # Intermediary calc 3
    t3 = t2 % 3600

    # Minutes
    if (minutes := int(t3 // 60)) > 0:
        if minutes != 1:
            result_list.append(f"{minutes} minutes")
        
        else:
            result_list.append(f"{minutes} minute")
    
    else:
        pass

    # Seconds
    if (seconds := int(t3 % 60)) > 0:
        if seconds != 1:
            result_list.append(f"{seconds} seconds")
        
        else:
            result_list.append(f"{seconds} second")
    
    else:
        pass

    # If there is at least time measure
    if len(result_list) > 0:
        return ", ".join(result_list)

    # If there are no time measures
    else:
        return "0 Seconds"


def set_time_uvar(tracker_list: list[bool, int, int, int, int, int], tracker_name: str, server_id: str) -> int:
    """
    Updates time UVAR and grabs current time

    Args:
        tracker_list (list): Tracker data
            (bool): Active status of tracker
            (int): Epoch time of last tracker change
            (int): Total time in seconds
            (int): Total number of times clocked in
            (int): All-time time in seconds
            (int): All-time number of times clocked in
        tracker_name (str): Key used for dictionary    
        server_id (str): Server ID

    Return:
        int: Time in seconds
    """

    # Grabs all_server_dict
    all_server_dict = load_json(get_uvar("clock_dict"))

    # If tracker has been updated
    if len(tracker_list) > 4:
        pass

    # If tracker is old version
    else:
        tracker_list.append(0)
        tracker_list.append(0)

    # Provides an updated tracker list
    all_server_dict[server_id][tracker_name] = [False, int(time()), tracker_list[2] - tracker_list[1] + int(time()), tracker_list[3], tracker_list[4] - tracker_list[1] + int(time()), tracker_list[5]]

    # Update dictionary
    set_uvar("clock_dict", dump_json(all_server_dict))

    return all_server_dict[server_id][tracker_name][2]


def main(input_list: list[str]) -> tuple(str, str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Title
        str: Body content
        str: Color hex code
    """

    # If there was at least 1 input:
    if len(input_list) > 0:
        pass

    # If there were no inputs:
    else:
        input_list.append("dm_time")

    # Store server id
    server_id = str(ctx.guild.id)

    # If the uvar exists, load dictionary
    if (all_server_test := get_uvar("clock_dict")):
        all_server_dict = load_json(all_server_test)

    # If the uvar does not exist
    else:
        return "You Have Been Sneak Attacked by an Error", 'UVAR `clock_dict` does not exist', "#CF142B"
    
    # If the server exists
    if (key_result := search_list(server_id, all_server_dict.keys())):
        pass

    # If the server does not exist
    else:
        return "You Have Been Sneak Attacked by an Error", "You need to start the tracker on this server before you can stop one", "#CF142B"

    # If there was at least one match
    if (key_result := search_list(input_list[0], all_server_dict[server_id].keys())):

        # If there was only one match
        if len(key_result) == 1:
            
            # If default tracker
            if key_result[0] == "dm_time":
                tracker_name = "DM Time"

            # If not default tracker
            else:
                tracker_name = key_result[0]

            # If tracker is active, stop tracker, and get current time
            if (tracker_data := all_server_dict[server_id][key_result[0]])[0]:
                current_time = set_time_uvar(tracker_data, key_result[0], server_id)

                # Construct output list
                result_list = [
                    f"**Current total time:** {calc_time(current_time)}",
                    f"**Current clock-ins:** {tracker_data[3]}",
                    f"**Time since last clock-in:** {calc_time(int(time()) - tracker_data[1])}"
                    ]

                return f"`{tracker_name}` Tracker Has Been Stopped", "\n".join(result_list), ""

            # If tracker is not active
            else:
                return "You Have Been Sneak Attacked by an Error", f"`{tracker_name}` tracker is not active", "#CF142B"

        # If there was more than one match
        else:

            # For each match
            for key in key_result:

                # If it doesn't exactly match
                if input_list[0].lower() != key.lower():
                    pass

                # If it does match, return result_list and key
                else:

                    # If default tracker
                    if key == "dm_time":
                        tracker_name = "DM Time"

                    # If not default tracker
                    else:
                        tracker_name = key

                    # If tracker is active, stop tracker, and get current time
                    if (tracker_data := all_server_dict[server_id][key])[0]:
                        current_time = set_time_uvar(tracker_data, key, server_id)

                        # Construct output list
                        result_list = [
                            f"**Current total time:** {calc_time(current_time)}",
                            f"**Current clock-ins:** {tracker_data[3]}",
                            f"**Time since last clock-in:** {calc_time(int(time()) - tracker_data[1])}"
                            ]

                        return f"`{tracker_name}` Tracker Has Been Stopped", "\n".join(result_list), ""

                    # If tracker is not active
                    else:
                        return "You Have Been Sneak Attacked by an Error", f"`{tracker_name}` tracker is not active", "#CF142B"

            # If no exact match was made
            key_result.insert(0, "**Multiple Trackers Found:**")
            
            return "You Have Been Sneak Attacked by an Error", "\n".join(key_result), "#CF142B"

    # If there were no matches
    else:
        return "You Have Been Sneak Attacked by an Error", f"Tracker not found (`{input_list[0]}`)", "#CF142B"


# Runs main program
title, f, color = main(&ARGS&)
l = "<"


</drac2>
-title "{{title}}"
-f "{{f}}"
-color "{{color}}"
-thumb "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/main.png"
-footer "{{ctx.prefix}}clock out {{l}}tracker name> | 12/16/23 | ShadowsStride"