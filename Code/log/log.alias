embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def calc_time(time: int) -> str:
    """
    Converts seconds into weeks, days, hours, minutes, seconds.
    
    Args:
        time (int): Time in seconds

    Return:
        str: Time string
    """

    # Unit 
    units = [
        (604800, 'week', 'weeks'),
        (86400, 'day', 'days'),
        (3600, 'hour', 'hours'),
        (60, 'minute', 'minutes'),
        (1, 'second', 'seconds')
    ]

    result_list = []

    # For each time unit
    for unit_time, singular_label, plural_label in units:

        # Floor division
        unit_count = int(time // unit_time)

        # Modular division
        time %= unit_time

        # If unit count is not 0, add to result_list with proper label
        if unit_count > 0:
            label = singular_label if unit_count == 1 else plural_label
            result_list.append(f"{unit_count} {label}")

        # If unit count is 0
        else:
            pass

    return ", ".join(result_list) if result_list != [] else "0 seconds"


def check_log(uvar_dict: dict, server_id: str, tracker_name: str) -> tuple(str, str, str, str):
    """
    Function to check out log for tracker

    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Title
        str: Body content
        str: Thumbnail URL
        str: Color hex code
    """

    # If tracker is active
    if uvar_dict[server_id][tracker_name][0]:
        f_status = "in"
        time_delta = int(time()) - uvar_dict[server_id][tracker_name][1]

    # If tracker is not active
    else:
        f_status = "out"
        time_delta = 0

    # Construct output
    result_list = [
        f"**Current Time:** {calc_time(uvar_dict[server_id][tracker_name][2] + time_delta)}",
        f"**Current Clock-ins:** {uvar_dict[server_id][tracker_name][3]}",
        f"**Current All-time time: {calc_time(uvar_dict[server_id][tracker_name][4] + time_delta)}",
        f"**Current All-time clock-ins: {uvar_dict[server_id][tracker_name][5]}",
        f"**Time Since Clock-{f_status}:** {calc_time(time_delta)}"
        ]

    return f"`{tracker_name}` Tracker Log", "\n".join(result_list), "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/main.png", ""


def main(input_list: list[str]) -> tuple(str, str, str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Title
        str: Body content
        str: Thumbnail URL
        str: Color hex code
    """

    # If no inputs were given, default to dm_time
    if len(input_list) == 0:
        input_list.append("dm_time")

    # If inputs were given
    else:
        pass

    # If UVAR exists, load dictionary
    if (uvar_test := get_uvar("clock_dict")):
        uvar_dict = load_json(uvar_test)

    # If UVAR does not exist
    else:
        return "You Have Been Sneak Attacked by an Error", "`clock_dict` UVAR does not exist", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/error.png", "#CF142B"


    # If server exists
    if (server_id := ctx.guild.id) in uvar_dict.keys():

        # If tracker found
        if (search_result := search_list(input_list[0], uvar_dict[server_id].keys())):

            # If exactly one tracker found
            if len(search_result) == 1:
                return check_log(uvar_dict, server_id, search_result[0])

            # If more than one tracker found
            else:

                # Iterate through all trackers
                for result in search_result:

                    # If not exact match
                    if result.lower() != input_list[0].lower():
                        pass

                    # If exact match
                    else:
                        return check_log(uvar_dict, server_id, result)

                search_result.insert(0, "**Multiple Trackers Found:**")

                return "You Have Been Sneak Attacked by an Error", "\n".join(search_result), "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/error.png", "#CF142B"

        # If tracker not found
        else:
            return "You Have Been Sneak Attacked by an Error", f"Tracker not found (`{input_list[0]}`)", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/error.png", "#CF142B" 

    # If server does not exist
    else:
        return "You Have Been Sneak Attacked by an Error", "You must first create a time tracker on this server", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Time-Tracker/main/Data/main.png", "#CF142B"


# Runs main program
title, f, thumb, color = main(&ARGS&)
l = "<"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}clock log {{l}}tracker name> | 12/16/23 | ShadowsStride"